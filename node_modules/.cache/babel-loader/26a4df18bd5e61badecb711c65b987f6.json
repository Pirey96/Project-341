{"ast":null,"code":"import _slicedToArray from \"/Users/alexandreattar/Desktop/slack/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexandreattar/Desktop/slack/src/components/LeftSection/ChannelSection.js\";\nimport React, { useState } from 'react';\nimport './../../App.css';\nimport { PlusSign } from './../shared/Icon';\nimport { Toggle } from './../shared/toggle';\nimport { BasicButton } from './../shared/BasicButton';\nimport { FloatingLabelTextField } from './../shared/FloatingLabelTextField';\nexport const ChannelSection = () => {\n  const _useState = useState(['General', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test']),\n        _useState2 = _slicedToArray(_useState, 2),\n        channels = _useState2[0],\n        setChannels = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showOverlay = _useState6[0],\n        setShowOverlay = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        privateChannel = _useState8[0],\n        setPrivateChannel = _useState8[1];\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        disabled = _useState10[0],\n        setDisabled = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        selected = _useState12[0],\n        setSelected = _useState12[1];\n\n  const click = () => {\n    setShowOverlay(true);\n  };\n\n  const toggle = () => {\n    const opposite = !privateChannel;\n    setPrivateChannel(opposite);\n  };\n\n  const close = () => {\n    setShowOverlay(false);\n    setPrivateChannel(false);\n  };\n\n  const onChannelNameChange = event => {\n    setName(event.target.value);\n\n    if (event.target.value.length > 0) {\n      setDisabled(false);\n    }\n  };\n\n  const onSubmit = () => {\n    const channelsTemp = channels;\n    channelsTemp.push(name);\n    setChannels(channelsTemp);\n    close(); //close pop-up after adding channel\n  };\n\n  return React.createElement(\"div\", {\n    className: \"main__layout--channels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(CreateChannelButton, {\n    createChannelClick: click,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Channels, {\n    channels: channels,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), showOverlay ? React.createElement(PopUpAddChannel, {\n    disabled: disabled,\n    closeOverlay: close,\n    selected: privateChannel,\n    onChange: onChannelNameChange,\n    onSubmit: onSubmit,\n    onToggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }) : null);\n};\n\nconst CreateChannelButton = props => {\n  return React.createElement(\"div\", {\n    className: \"longButton__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label__header label__header--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Channels\"), React.createElement(\"span\", {\n    className: \"label__header\",\n    onClick: props.createChannelClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(PlusSign, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })));\n};\n\nconst Channel = props => {\n  return React.createElement(\"div\", {\n    className: \"section__channel container_channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, props.name));\n};\n\nconst Channels = props => {\n  const channelsAr = props.channels;\n  return React.createElement(\"div\", {\n    className: \"section__channels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, channelsAr.map(aChannel => React.createElement(Channel, {\n    name: aChannel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};\n\nconst PopUpAddChannel = props => {\n  const emptyFieldMessage = 'Don’t forget to name your channel.';\n  const nameTooLongMessage = 'Channel names can’t be longer than 80 characters.';\n  const channelDescription = 'Channels are where your members communicate. They\\'re best when organized around a topic - #proj-budget, for example.';\n  const toggleDefaultDesc = 'When a channel is set to private, it can only be viewed or joined by invitation.';\n  const toggleSelectedDesc = 'This can’t be undone. A private channel cannot be made public later on.';\n  const underField = 'What’s this channel about?';\n  const displayToggleDesc = props.selected ? toggleSelectedDesc : toggleDefaultDesc;\n  return React.createElement(\"div\", {\n    className: \"section__overlay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"popUp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"popUp__top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"popUp__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, props.selected ? 'Create a private channel' : 'Create a channel'), React.createElement(\"div\", {\n    className: \"closeButton__container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"popUp__closeButton\",\n    onClick: props.closeOverlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"popUp__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"popUp_briefDesc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \" \", channelDescription, \" \")), React.createElement(FloatingLabelTextField, {\n    header: 'Name',\n    errorEmptyField: emptyFieldMessage,\n    errorNameTooLong: nameTooLongMessage,\n    beforeIcon: '#',\n    placehoder: 'e.g. plan-budget',\n    onChange: props.onNameChange,\n    maxLength: 80,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(FloatingLabelTextField, {\n    header: 'Description',\n    optional: true,\n    onChange: props.onDescChange,\n    beforeIcon: '#',\n    underField: underField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Toggle, {\n    toggleHeader: \"Make private\",\n    toggleDesc: displayToggleDesc,\n    onToggle: props.onToggle,\n    selected: props.selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"popUp__bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"popUp__button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(BasicButton, {\n    disabled: props.disabled,\n    label: 'Create',\n    onClick: props.onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })))));\n};","map":{"version":3,"sources":["/Users/alexandreattar/Desktop/slack/src/components/LeftSection/ChannelSection.js"],"names":["React","useState","PlusSign","Toggle","BasicButton","FloatingLabelTextField","ChannelSection","channels","setChannels","name","setName","showOverlay","setShowOverlay","privateChannel","setPrivateChannel","disabled","setDisabled","selected","setSelected","click","toggle","opposite","close","onChannelNameChange","event","target","value","length","onSubmit","channelsTemp","push","CreateChannelButton","props","createChannelClick","Channel","Channels","channelsAr","map","aChannel","PopUpAddChannel","emptyFieldMessage","nameTooLongMessage","channelDescription","toggleDefaultDesc","toggleSelectedDesc","underField","displayToggleDesc","closeOverlay","onNameChange","onDescChange","onToggle"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './../../App.css';\nimport { PlusSign } from './../shared/Icon';\nimport { Toggle } from './../shared/toggle';\nimport { BasicButton }  from './../shared/BasicButton';\nimport { FloatingLabelTextField } from './../shared/FloatingLabelTextField';\n\nexport const ChannelSection = () => {\n\n    const [channels, setChannels] = useState(['General', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test', 'General test']);\n    const [name, setName] = useState('');\n    const [showOverlay, setShowOverlay] = useState(false);\n    const [privateChannel, setPrivateChannel] = useState(false);\n    const [disabled, setDisabled] = useState(true);\n    const [selected, setSelected] = useState(false);\n\n    const click = () => {\n        setShowOverlay(true);\n    };\n\n    const toggle = () => {\n        const opposite = !privateChannel;\n        setPrivateChannel(opposite)\n    }\n\n    const close = () => {\n        setShowOverlay(false);\n        setPrivateChannel(false)\n    };\n\n    const onChannelNameChange= (event) => {\n        setName(event.target.value);\n        if(event.target.value.length > 0) {\n            setDisabled(false);\n        }\n    };\n\n    const onSubmit = () => {\n        const channelsTemp = channels\n        channelsTemp.push(name)\n        setChannels(channelsTemp);\n        close(); //close pop-up after adding channel\n    };\n\n    return(\n        <div className=\"main__layout--channels\">\n            <CreateChannelButton \n            createChannelClick={click}\n            />\n            <Channels channels={channels} />\n           { showOverlay ? <PopUpAddChannel \n           disabled={disabled}\n           closeOverlay={close} \n           selected={privateChannel}\n           onChange={onChannelNameChange} \n           onSubmit={onSubmit}\n           onToggle={toggle}\n           /> : null }\n        </div>\n    );\n};\n\nconst CreateChannelButton = (props) => {\n    return (\n        <div className=\"longButton__header\">\n            <span className=\"label__header label__header--title\" >Channels</span> \n            <span className=\"label__header\" onClick={props.createChannelClick}><PlusSign /></span>\n        </div>\n    );\n};\n\nconst Channel = (props) => {\n    return (\n        <div className=\"section__channel container_channel\">\n            <span>{props.name}</span>\n        </div>\n    );\n}\n\n\nconst Channels = (props) => {\nconst channelsAr = props.channels;\n    return (\n        <div className=\"section__channels\">\n            { channelsAr.map((aChannel) => \n                <Channel name={aChannel} />\n            )}\n        </div>\n    );\n}\n\nconst PopUpAddChannel = (props) => {\n    const emptyFieldMessage = 'Don’t forget to name your channel.';\n    const nameTooLongMessage = 'Channel names can’t be longer than 80 characters.';\n    const channelDescription = 'Channels are where your members communicate. They\\'re best when organized around a topic - #proj-budget, for example.'\n    const toggleDefaultDesc = 'When a channel is set to private, it can only be viewed or joined by invitation.';\n    const toggleSelectedDesc = 'This can’t be undone. A private channel cannot be made public later on.';\n    const underField = 'What’s this channel about?';\n\n    const displayToggleDesc = props.selected ? toggleSelectedDesc : toggleDefaultDesc;\n\n    return(\n        <div className=\"section__overlay\" >\n            <div className=\"popUp\">\n                <div className=\"popUp__top\">\n                    <span className=\"popUp__header\">{props.selected ? 'Create a private channel': 'Create a channel'}</span> \n                    <div className='closeButton__container'>\n                        <span className='popUp__closeButton' onClick={props.closeOverlay}></span>\n                    </div>\n                </div>\n                <div className=\"popUp__body\">\n                    <div>\n                        <span className='popUp_briefDesc'> {channelDescription} </span>\n                    </div>\n                    <FloatingLabelTextField \n                    header={'Name'} \n                    errorEmptyField={emptyFieldMessage} \n                    errorNameTooLong={nameTooLongMessage}\n                    beforeIcon={'#'} \n                    placehoder={'e.g. plan-budget'} \n                    onChange={props.onNameChange} \n                    maxLength={80}\n                    />\n                    <FloatingLabelTextField \n                    header={'Description'} \n                    optional={true} \n                    onChange={props.onDescChange} \n                    beforeIcon={'#'}\n                    underField={underField}\n                    />\n\n                    <Toggle \n                    toggleHeader='Make private'\n                    toggleDesc={displayToggleDesc}\n                    onToggle={props.onToggle} \n                    selected={props.selected} \n                    />\n                </div>\n                <div className=\"popUp__bottom\">\n                    <div className='popUp__button'>\n                        <BasicButton disabled={props.disabled} label={'Create'} onClick={props.onSubmit}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}