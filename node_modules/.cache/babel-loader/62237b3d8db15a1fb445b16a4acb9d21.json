{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\nimport \"firebase/analytics\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst rtdb = firebase.database();\n\nconst setupPresence = user => {\n  const isOfflineForRTDB = {\n    state: 'offline',\n    lastChanged: firebase.database.ServerValue.TIMESTAMP\n  };\n  const isOnlineForRTDB = {\n    state: 'online',\n    lastChanged: firebase.database.ServerValue.TIMESTAMP\n  };\n  const isOfflineForFirestore = {\n    state: 'offline',\n    lastChanged: firebase.firestore.FieldValue.serverTimestamp()\n  };\n  const isOnlineForFirestore = {\n    state: 'online',\n    lastChanged: firebase.firestore.FieldValue.serverTimestamp()\n  };\n  const rtdbRef = rtdb.ref(\"/status/\".concat(user.uid));\n  const userDoc = db.doc(\"/users/\".concat(user.uid));\n  rtdb.ref('.info/connected').on('value', async snapshot => {\n    if (snapshot.val() === false) {\n      userDoc.update({\n        status: isOfflineForFirestore\n      });\n      return;\n    }\n\n    await rtdbRef.onDisconnect().set(isOfflineForRTDB);\n    rtdbRef.set(isOnlineForRTDB);\n    userDoc.update({\n      status: isOnlineForFirestore\n    });\n  });\n};\n\nexport { db, firebase, setupPresence };","map":{"version":3,"sources":["/Users/alexandreattar/Desktop/slack/src/firebase.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","initializeApp","db","firestore","rtdb","database","setupPresence","user","isOfflineForRTDB","state","lastChanged","ServerValue","TIMESTAMP","isOnlineForRTDB","isOfflineForFirestore","FieldValue","serverTimestamp","isOnlineForFirestore","rtdbRef","ref","uid","userDoc","doc","on","snapshot","val","update","status","onDisconnect","set"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,kBAAP;AACA,OAAO,oBAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADD;AAEnBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFL;AAGnBC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHN;AAInBC,EAAAA,SAAS,EAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJJ;AAKnBC,EAAAA,aAAa,EAAET,OAAO,CAACC,GAAR,CAAYS,wBALR;AAMnBC,EAAAA,iBAAiB,EAAEX,OAAO,CAACC,GAAR,CAAYW,6BANZ;AAOnBC,EAAAA,KAAK,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPA,CAAvB,C,CASE;;AACAjB,QAAQ,CAACkB,aAAT,CAAuBjB,cAAvB;AAEA,MAAMkB,EAAE,GAAGnB,QAAQ,CAACoB,SAAT,EAAX;AACA,MAAMC,IAAI,GAAGrB,QAAQ,CAACsB,QAAT,EAAb;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAU;AAC9B,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,KAAK,EAAE,SADgB;AAEvBC,IAAAA,WAAW,EAAE3B,QAAQ,CAACsB,QAAT,CAAkBM,WAAlB,CAA8BC;AAFpB,GAAzB;AAIA,QAAMC,eAAe,GAAG;AACtBJ,IAAAA,KAAK,EAAE,QADe;AAEtBC,IAAAA,WAAW,EAAE3B,QAAQ,CAACsB,QAAT,CAAkBM,WAAlB,CAA8BC;AAFrB,GAAxB;AAIA,QAAME,qBAAqB,GAAG;AAC5BL,IAAAA,KAAK,EAAE,SADqB;AAE5BC,IAAAA,WAAW,EAAE3B,QAAQ,CAACoB,SAAT,CAAmBY,UAAnB,CAA8BC,eAA9B;AAFe,GAA9B;AAIA,QAAMC,oBAAoB,GAAG;AAC3BR,IAAAA,KAAK,EAAE,QADoB;AAE3BC,IAAAA,WAAW,EAAE3B,QAAQ,CAACoB,SAAT,CAAmBY,UAAnB,CAA8BC,eAA9B;AAFc,GAA7B;AAIA,QAAME,OAAO,GAAGd,IAAI,CAACe,GAAL,mBAAoBZ,IAAI,CAACa,GAAzB,EAAhB;AACA,QAAMC,OAAO,GAAGnB,EAAE,CAACoB,GAAH,kBAAiBf,IAAI,CAACa,GAAtB,EAAhB;AAEAhB,EAAAA,IAAI,CAACe,GAAL,CAAS,iBAAT,EAA4BI,EAA5B,CAA+B,OAA/B,EAAwC,MAAOC,QAAP,IAAoB;AAC1D,QAAIA,QAAQ,CAACC,GAAT,OAAmB,KAAvB,EAA8B;AAC5BJ,MAAAA,OAAO,CAACK,MAAR,CAAe;AACbC,QAAAA,MAAM,EAAEb;AADK,OAAf;AAGA;AACD;;AAED,UAAMI,OAAO,CAACU,YAAR,GAAuBC,GAAvB,CAA2BrB,gBAA3B,CAAN;AACAU,IAAAA,OAAO,CAACW,GAAR,CAAYhB,eAAZ;AACAQ,IAAAA,OAAO,CAACK,MAAR,CAAe;AACbC,MAAAA,MAAM,EAAEV;AADK,KAAf;AAGD,GAbD;AAcD,CAlCD;;AAoCA,SAASf,EAAT,EAAanB,QAAb,EAAuBuB,aAAvB","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\nimport \"firebase/analytics\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  \n  const db = firebase.firestore();\n  const rtdb = firebase.database();\n  \n  const setupPresence = (user) => {\n    const isOfflineForRTDB = {\n      state: 'offline',\n      lastChanged: firebase.database.ServerValue.TIMESTAMP,\n    };\n    const isOnlineForRTDB = {\n      state: 'online',\n      lastChanged: firebase.database.ServerValue.TIMESTAMP,\n    };\n    const isOfflineForFirestore = {\n      state: 'offline',\n      lastChanged: firebase.firestore.FieldValue.serverTimestamp(),\n    };\n    const isOnlineForFirestore = {\n      state: 'online',\n      lastChanged: firebase.firestore.FieldValue.serverTimestamp(),\n    };\n    const rtdbRef = rtdb.ref(`/status/${user.uid}`);\n    const userDoc = db.doc(`/users/${user.uid}`);\n  \n    rtdb.ref('.info/connected').on('value', async (snapshot) => {\n      if (snapshot.val() === false) {\n        userDoc.update({\n          status: isOfflineForFirestore,\n        });\n        return;\n      }\n  \n      await rtdbRef.onDisconnect().set(isOfflineForRTDB);\n      rtdbRef.set(isOnlineForRTDB);\n      userDoc.update({\n        status: isOnlineForFirestore,\n      });\n    });\n  };\n  \n  export { db, firebase, setupPresence };"]},"metadata":{},"sourceType":"module"}